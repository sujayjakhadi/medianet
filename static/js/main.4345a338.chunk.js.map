{"version":3,"sources":["components/HeaderComponent.js","components/Stock.js","App.js","serviceWorker.js","index.js"],"names":["HeaderComponent","react_default","a","createElement","className","Stock","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getColumns","title","dataIndex","render","text","toUpperCase","record","props","classname","children","toFixed","icon","onClick","getInfo","style","color","float","fontSize","type","getTimeDiff","width","build","data","toConsumableArray","reverse","value","flat","state","liveData","popContent","popTicker","indexArr","setState","ticker","prevValues","drawerVisible","input","diff","Date","Math","floor","toLocaleString","res","_this2","JSON","parse","map","obj","index","indexOf","push","updatedAt","unshift","pop","_this3","react","react_websocket_build_default","url","onMessage","handleData","bind","table","pagination","pageSize","size","columns","dataSource","bordered","drawer","concat","placement","onClose","visible","list","header","renderItem","item","Item","Component","App","components_HeaderComponent","Stock_Stock","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4345a338.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../css/headerComponent.css'\r\n\r\nfunction HeaderComponent() {\r\n  return (\r\n    <div className=\"header-container\">\r\n      <h3> Live Stock Prices </h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HeaderComponent;","import React, {Component, Fragment} from 'react';\r\nimport {Table, Icon, Drawer, List} from 'antd';\r\nimport { Sparklines,SparklinesLine, SparklinesSpots } from 'react-sparklines';\r\nimport Websocket from 'react-websocket';\r\nimport './../css/stock.css'\r\n\r\nexport default class Stock extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tliveData: [],\r\n\t\t\tpopContent : [],\r\n\t\t\tpopTicker: ''\r\n\t\t}\r\n\t\tthis.indexArr= []\r\n\t}\r\n\r\n\tgetInfo(record) {\r\n\t\tthis.setState({\r\n\t\t\tpopTicker: record.ticker.toUpperCase(),\r\n\t\t\tpopContent: [...record.prevValues],\r\n\t\t\tdrawerVisible: true\r\n\t\t}) \r\n\t}\r\n\r\n\tgetColumns = () => {\r\n\t\treturn [\r\n\t\t\t{\r\n\t\t\t\ttitle: 'Ticker',\r\n\t\t\t\tdataIndex: 'ticker',\r\n\t\t\t\trender: (text) => (\r\n\t\t\t\t\t<span> {text.toUpperCase()} </span>\r\n\t\t\t\t)\r\n\t\t\t}, {\r\n\t\t\t\ttitle: 'Price',\r\n\t\t\t\tdataIndex: 'value',\r\n\t\t\t\trender: (text, record) => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tprops:{\r\n\t                        className: record.classname\r\n\t                    },\r\n\t                    children:(<span> \r\n\t                    \t{text.toFixed(2)} \r\n                    \t\t{record.classname !== 'first-price' && \r\n                    \t\t<Icon onClick = {() => this.getInfo(record)} style = {{color: 'blue', float: 'right', fontSize: '16px'}} type=\"info-circle\" />}\r\n\t                    </span>)\r\n                \t}\r\n\t\t\t\t}\r\n\t\t\t}, {\r\n\t\t\t\ttitle: 'Last Update',\r\n\t\t\t\tdataIndex: 'updatedAt',\r\n\t\t\t\trender : (text) =>  (\r\n\t\t\t\t\t<span> {this.getTimeDiff(text)} </span>\r\n\t\t\t\t)\r\n\t\t\t}, {\r\n\t\t\t\ttitle: 'Trends',\r\n\t\t\t\tdataIndex: 'prevValues',\r\n\t\t\t\twidth:'25%',\r\n\t\t\t\trender : (text, record) =>  (\r\n\t\t\t\t\t<Sparklines data={[[...text].reverse(), record.value].flat()}>\r\n\t\t\t\t  \t\t<SparklinesLine color=\"#468bc9\" />\r\n    \t\t\t\t\t<SparklinesSpots />\r\n\t\t\t\t  \t</Sparklines>\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n\r\n\tgetTimeDiff(input) {\r\n\t\tif (!input) return;\r\n\t\tlet curDate = new Date();\r\n\t\tlet diff = curDate - input;\r\n\t\tif (diff < 60000) return 'A few seconds ago' \r\n\t\tif (diff < 3600000) {\r\n\t\t\treturn Math.floor(diff / 60000) + ' minute(s) ago'\r\n\t\t}\r\n\t\tif (diff < 86400000) {\r\n\t\t\treturn Math.floor(diff / 3600000) + ' Hour(s) ago'\r\n\t\t}\r\n\t\treturn input.toLocaleString()\r\n\t}\r\n\r\n\thandleData(res) { \r\n\t  let data = JSON.parse(res),\r\n\t  \tliveData = [...this.state.liveData];\r\n\t  data.map(obj => {\r\n\t  \tlet index = this.indexArr.indexOf(obj[0]);\r\n\t  \tif(index === -1) {\r\n\t  \t\tthis.indexArr.push(obj[0]);\r\n\t  \t\tliveData.push({ticker: obj[0], value: obj[1], prevValues: [], classname: 'first-price', updatedAt: new Date()})\t\r\n\t  \t} else {\r\n\t  \t\tlet len = liveData[index].prevValues.unshift(liveData[index].value);\r\n\t  \t\tif(len > 5) {\r\n\t  \t\t\tliveData[index].prevValues.pop();\r\n\t  \t\t}\r\n\t  \t\tliveData[index].value = obj[1];\r\n\t  \t\tliveData[index].updatedAt = new Date();\r\n\t  \t\tliveData[index].classname = liveData[index].prevValues[0] > obj[1] ? 'red-column price' : liveData[index].prevValues[0] < obj[1] ? 'green-column price' : 'white-column price'\r\n\t  \t}\r\n\t  });\r\n      this.setState({\r\n      \tliveData: liveData\r\n      })\r\n    }\r\n\r\n\trender() {\r\n\t\treturn(\r\n\t\t\t<Fragment>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Websocket url='wss://stocks.mnet.website' onMessage={this.handleData.bind(this)}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className = \"table-container\">\r\n\t\t\t\t\t<Table pagination={{ pageSize: 25 }} size = \"small\" columns ={this.getColumns()} dataSource = {this.state.liveData} bordered />\r\n\t\t\t\t</div>\r\n\t\t\t\t<Drawer\r\n\t\t          title= {`${this.state.popTicker}: History`}\r\n\t\t          placement='right'\r\n\t\t          onClose={() => {this.setState({drawerVisible: false})}}\r\n\t\t          visible={this.state.drawerVisible}\r\n\t\t        >\r\n\t\t        <List\r\n\t\t\t      size=\"small\"\r\n\t\t\t      header={<div>Last 5 Prices</div>}\r\n\t\t\t      bordered\r\n\t\t\t      dataSource={this.state.popContent}\r\n\t\t\t      renderItem={item => <List.Item>{item.toFixed(2)}</List.Item>}\r\n\t\t\t    />\r\n\t\t        \r\n\t\t        </Drawer>\r\n\t\t\t</Fragment>\r\n\t\t)\r\n\t}\r\n}","import React from 'react';\r\nimport HeaderComponent from './components/HeaderComponent.js'\r\nimport Stock from './components/Stock.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <HeaderComponent />\r\n      <Stock />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'antd/dist/antd.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}